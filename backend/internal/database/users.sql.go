// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUser = `-- name: AddUser :exec
    -- email VARCHAR(255) UNIQUE NOT NULL,
    -- first_name VARCHAR(50),
    -- last_name VARCHAR(50),
    -- bio TEXT,
    -- created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    -- updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    -- last_login TIMESTAMP WITH TIME ZONE,
    -- is_active BOOLEAN DEFAULT true

INSERT INTO users
(email, first_name, last_name)
VALUES ($1, $2, $3)
`

type AddUserParams struct {
	Email     string
	FirstName pgtype.Text
	LastName  pgtype.Text
}

// id SERIAL PRIMARY KEY,
func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) error {
	_, err := q.db.Exec(ctx, addUser, arg.Email, arg.FirstName, arg.LastName)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, first_name, last_name, bio, created_at, updated_at, last_login, is_active FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.IsActive,
	)
	return i, err
}

const loginUser = `-- name: LoginUser :exec
UPDATE users SET 
last_login = now()
`

func (q *Queries) LoginUser(ctx context.Context) error {
	_, err := q.db.Exec(ctx, loginUser)
	return err
}

const setUserActive = `-- name: SetUserActive :exec
UPDATE users SET 
is_active = true
`

func (q *Queries) SetUserActive(ctx context.Context) error {
	_, err := q.db.Exec(ctx, setUserActive)
	return err
}
